---
import path from "node:path";
import License from "@components/misc/License.astro";
import Markdown from "@components/misc/Markdown.astro";
import I18nKey from "@i18n/i18nKey";
import { i18n } from "@i18n/translation";
import MainGridLayout from "@layouts/MainGridLayout.astro";
import { getSortedPosts } from "@utils/content-utils";
import { getDir, getPostUrlBySlug } from "@utils/url-utils";
import { Icon } from "astro-icon/components";
import { licenseConfig } from "src/config";
import PostMetadata from "../../components/PostMeta.astro";
import ImageWrapper from "../../components/misc/ImageWrapper.astro";
import { profileConfig, siteConfig } from "../../config";
import { formatDateToYYYYMMDD } from "../../utils/date-utils";
import { calculateTypstReadingTime } from "../../plugins/typst-reading-time.mjs";

export async function getStaticPaths() {
	const blogEntries = await getSortedPosts();
	return blogEntries.map((entry) => ({
		params: { slug: entry.slug },
		props: { entry },
	}));
}

const { entry } = Astro.props;
const { Content, headings } = await entry.render();

// Check if this is a Typst document
const isTypstPost = entry.collection === "typst-posts";

// 处理字数和阅读时间
let words: number | undefined;
let minutes: number | undefined;

if (isTypstPost) {
	// 对于 Typst 文件，使用自定义计算
	const readingTime = calculateTypstReadingTime(entry);
	words = readingTime.words;
	minutes = readingTime.minutes;
} else {
	// 对于 Markdown 文件，使用现有的 remark 插件结果
	const { remarkPluginFrontmatter } = await entry.render();
	words = remarkPluginFrontmatter.words;
	minutes = remarkPluginFrontmatter.minutes;
}

const jsonLd = {
	"@context": "https://schema.org",
	"@type": "BlogPosting",
	headline: entry.data.title,
	description: entry.data.description || entry.data.desc || entry.data.title,
	keywords: entry.data.tags,
	author: {
		"@type": "Person",
		name: profileConfig.name,
		url: Astro.site,
	},
	datePublished: formatDateToYYYYMMDD(entry.data.published || entry.data.date),
	inLanguage: entry.data.lang
		? entry.data.lang.replace("_", "-")
		: siteConfig.lang.replace("_", "-"),
	// TODO include cover image here
};
---
<MainGridLayout banner={entry.data.image} title={entry.data.title} description={entry.data.description} lang={entry.data.lang} setOGTypeArticle={true} headings={headings}>
    <script is:inline slot="head" type="application/ld+json" set:html={JSON.stringify(jsonLd)}></script>
    
    <!-- Import Typst styles if needed -->
    {isTypstPost && <link rel="stylesheet" href="/src/styles/typst.css" slot="head" />}
    
    <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative mb-4">
        <div id="post-container" class:list={["card-base z-10 px-6 md:px-9 pt-6 pb-4 relative w-full ",
            {}
        ]}>
            <!-- word count and reading time - 支持所有文件类型 -->
            {(words !== undefined && minutes !== undefined) && (
            <div class="flex flex-row text-black/30 dark:text-white/30 gap-5 mb-3 transition onload-animation">
                <div class="flex flex-row items-center">
                    <div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2">
                        <Icon name="material-symbols:notes-rounded"></Icon>
                    </div>
                    <div class="text-sm">{words} {" " + i18n(I18nKey.wordsCount)}</div>
                </div>
                <div class="flex flex-row items-center">
                    <div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2">
                        <Icon name="material-symbols:schedule-outline-rounded"></Icon>
                    </div>
                    <div class="text-sm">{minutes} {" " + i18n(I18nKey.minutesCount)}</div>
                </div>
            </div>
            )}

            <!-- title -->
            <div class="relative onload-animation">
                <div
                    data-pagefind-weight="10" data-pagefind-meta="title"
                    class="transition w-full block font-bold mb-3
                    text-3xl md:text-[2.25rem]/[2.75rem]
                    text-black/90 dark:text-white/90
                    md:before:w-1 before:h-5 before:rounded-md before:bg-[var(--primary)]
                    before:absolute before:top-[0.75rem] before:left-[-1.125rem]
                ">
                    {entry.data.title}
                </div>
            </div>

            <!-- metadata -->
            <div class="onload-animation">
                <PostMetadata
                        class="mb-5"
                        published={entry.data.published || entry.data.date}
                        updated={entry.data.updated}
                        tags={entry.data.tags}
                        category={entry.data.category}
                        words={words}
                        minutes={minutes}
                ></PostMetadata>
                {!entry.data.image && <div class="border-[var(--line-divider)] border-dashed border-b-[1px] mb-5"></div>}
            </div>

            <!-- always show cover as long as it has one -->
            {entry.data.image &&
                <ImageWrapper id="post-cover" src={entry.data.image} basePath={path.join("content/", isTypstPost ? "typst-posts/" : "posts/", getDir(entry.id))} class="mb-8 rounded-xl banner-container onload-animation"/>
            }

            <!-- Content rendering -->
            {isTypstPost ? (
                <div class="mb-6 typst-content onload-animation" 
                     data-pagefind-body 
                     data-pagefind-meta="type:typst,tags:{entry.data.tags.join(',')},category:{entry.data.category || 'uncategorized'}">
                    <Content />
                </div>
            ) : (
                <Markdown class="mb-6 markdown-content onload-animation">
                    <Content />
                </Markdown>
            )}

            {licenseConfig.enable && <License title={entry.data.title} slug={entry.slug} pubDate={entry.data.published || entry.data.date} class="mb-6 rounded-xl license-container onload-animation"></License>}

        </div>
    </div>

    <div class="flex flex-col md:flex-row justify-between mb-4 gap-4 overflow-hidden w-full">
        <a href={entry.data.nextSlug ? getPostUrlBySlug(entry.data.nextSlug) : "#"}
           class:list={["w-full font-bold overflow-hidden active:scale-95", {"pointer-events-none": !entry.data.nextSlug}]}>
            {entry.data.nextSlug && <div class="btn-card rounded-2xl w-full h-[3.75rem] max-w-full px-4 flex items-center !justify-start gap-4" >
                <Icon name="material-symbols:chevron-left-rounded" class="text-[2rem] text-[var(--primary)]" />
                <div class="overflow-hidden transition overflow-ellipsis whitespace-nowrap max-w-[calc(100%_-_3rem)] text-black/75 dark:text-white/75">
                    {entry.data.nextTitle}
                </div>
            </div>}
        </a>

        <a href={entry.data.prevSlug ? getPostUrlBySlug(entry.data.prevSlug) : "#"}
           class:list={["w-full font-bold overflow-hidden active:scale-95", {"pointer-events-none": !entry.data.prevSlug}]}>
            {entry.data.prevSlug && <div class="btn-card rounded-2xl w-full h-[3.75rem] max-w-full px-4 flex items-center !justify-end gap-4">
                <div class="overflow-hidden transition overflow-ellipsis whitespace-nowrap max-w-[calc(100%_-_3rem)] text-black/75 dark:text-white/75">
                    {entry.data.prevTitle}
                </div>
                <Icon name="material-symbols:chevron-right-rounded" class="text-[2rem] text-[var(--primary)]" />
            </div>}
        </a>
    </div>

</MainGridLayout>

<!-- Typst image path processing script -->
{isTypstPost && (
    <script is:inline define:vars={{ postDir: getDir(entry.id) }}>
        // Process Typst images with relative paths
        document.addEventListener('DOMContentLoaded', function() {
            const typstContent = document.querySelector('.typst-content');
            if (!typstContent) return;
            
            // Find all images with the data-typst-image attribute
            const typstImages = typstContent.querySelectorAll('img[data-typst-image]');
            
            typstImages.forEach(img => {
                const src = img.getAttribute('src');
                if (!src) return;
                
                // Check if it's a relative path (doesn't start with http, https, /, or data:)
                if (!src.startsWith('http') && !src.startsWith('https') && 
                    !src.startsWith('/') && !src.startsWith('data:')) {
                    
                    // Convert relative path to absolute path
                    const absoluteSrc = `/src/content/typst-posts/${postDir}/${src}`;
                    img.setAttribute('src', absoluteSrc);
                    
                    // Also add some styling for better presentation
                    img.style.display = 'block';
                    img.style.maxWidth = '100%';
                    img.style.height = 'auto';
                    img.style.margin = '1rem auto';
                    img.style.borderRadius = '0.5rem';
                }
            });
        });
    </script>
)}
